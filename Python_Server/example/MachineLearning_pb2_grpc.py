# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import MachineLearning_pb2 as MachineLearning__pb2


class MachineLearningStub(object):
  """The machine learning service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.StartLearn = channel.unary_unary(
        '/example.MachineLearning/StartLearn',
        request_serializer=MachineLearning__pb2.SendRequest.SerializeToString,
        response_deserializer=MachineLearning__pb2.GetReply.FromString,
        )


class MachineLearningServicer(object):
  """The machine learning service definition.
  """

  def StartLearn(self, request, context):
    """Sends a machine learning result
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MachineLearningServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'StartLearn': grpc.unary_unary_rpc_method_handler(
          servicer.StartLearn,
          request_deserializer=MachineLearning__pb2.SendRequest.FromString,
          response_serializer=MachineLearning__pb2.GetReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'example.MachineLearning', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
